# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'oct_gui.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.



import sys
import os
import re
import subprocess
import pandas as pd

import easygui

from PyQt5 import QtCore, QtGui, QtWidgets

from siamese_net_avg_final import driver_single_image

class Ui_MainWindow(object):
    def __init__(self):
        self.defaultFilePath, self.defaultDirPath = os.getcwd(), os.getcwd()

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setEnabled(True)
        MainWindow.resize(839, 595)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("assets/favicon.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setWhatsThis("")
        MainWindow.setAutoFillBackground(False)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.selectDatabase = QtWidgets.QPushButton(self.centralwidget)
        self.selectDatabase.setGeometry(QtCore.QRect(700, 120, 121, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.selectDatabase.setFont(font)
        self.selectDatabase.setObjectName("selectDatabase")
        self.databasePath = QtWidgets.QLineEdit(self.centralwidget)
        self.databasePath.setGeometry(QtCore.QRect(10, 120, 681, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.databasePath.setFont(font)
        self.databasePath.setObjectName("databasePath")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(10, 90, 821, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.retrieve_1 = QtWidgets.QPushButton(self.centralwidget)
        self.retrieve_1.setGeometry(QtCore.QRect(160, 170, 241, 41))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.retrieve_1.setFont(font)
        self.retrieve_1.setObjectName("retrieve_1")
        self.cbirSummary = QtWidgets.QTableWidget(self.centralwidget)
        self.cbirSummary.setEnabled(True)
        self.cbirSummary.setGeometry(QtCore.QRect(10, 261, 811, 201))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.cbirSummary.sizePolicy().hasHeightForWidth())
        self.cbirSummary.setSizePolicy(sizePolicy)
        self.cbirSummary.setMinimumSize(QtCore.QSize(811, 0))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.cbirSummary.setFont(font)
        self.cbirSummary.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContents)
        self.cbirSummary.setRowCount(7)
        self.cbirSummary.setObjectName("cbirSummary")
        self.cbirSummary.setColumnCount(4)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.cbirSummary.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.cbirSummary.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.cbirSummary.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.cbirSummary.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        item.setFlags(QtCore.Qt.ItemIsSelectable|QtCore.Qt.ItemIsEditable|QtCore.Qt.ItemIsDragEnabled|QtCore.Qt.ItemIsDropEnabled|QtCore.Qt.ItemIsUserCheckable)
        self.cbirSummary.setItem(0, 0, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        item.setFlags(QtCore.Qt.ItemIsSelectable|QtCore.Qt.ItemIsEditable|QtCore.Qt.ItemIsDragEnabled|QtCore.Qt.ItemIsDropEnabled|QtCore.Qt.ItemIsUserCheckable)
        self.cbirSummary.setItem(1, 0, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        item.setFlags(QtCore.Qt.ItemIsSelectable|QtCore.Qt.ItemIsEditable|QtCore.Qt.ItemIsDragEnabled|QtCore.Qt.ItemIsDropEnabled|QtCore.Qt.ItemIsUserCheckable)
        self.cbirSummary.setItem(2, 0, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        item.setFlags(QtCore.Qt.ItemIsSelectable|QtCore.Qt.ItemIsEditable|QtCore.Qt.ItemIsDragEnabled|QtCore.Qt.ItemIsDropEnabled|QtCore.Qt.ItemIsUserCheckable)
        self.cbirSummary.setItem(3, 0, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        item.setFlags(QtCore.Qt.ItemIsSelectable|QtCore.Qt.ItemIsEditable|QtCore.Qt.ItemIsDragEnabled|QtCore.Qt.ItemIsDropEnabled|QtCore.Qt.ItemIsUserCheckable)
        self.cbirSummary.setItem(4, 0, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        item.setFlags(QtCore.Qt.ItemIsSelectable|QtCore.Qt.ItemIsEditable|QtCore.Qt.ItemIsDragEnabled|QtCore.Qt.ItemIsDropEnabled|QtCore.Qt.ItemIsUserCheckable)
        self.cbirSummary.setItem(5, 0, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        item.setFlags(QtCore.Qt.ItemIsSelectable|QtCore.Qt.ItemIsEditable|QtCore.Qt.ItemIsDragEnabled|QtCore.Qt.ItemIsDropEnabled|QtCore.Qt.ItemIsUserCheckable)
        self.cbirSummary.setItem(6, 0, item)
        self.cbirSummary.horizontalHeader().setVisible(True)
        self.cbirSummary.horizontalHeader().setCascadingSectionResizes(False)
        self.cbirSummary.horizontalHeader().setDefaultSectionSize(200)
        self.cbirSummary.horizontalHeader().setSortIndicatorShown(True)
        self.cbirSummary.horizontalHeader().setStretchLastSection(True)
        self.resultSummary = QtWidgets.QTableWidget(self.centralwidget)
        self.resultSummary.setGeometry(QtCore.QRect(10, 500, 421, 51))
        self.resultSummary.setRowCount(1)
        self.resultSummary.setObjectName("resultSummary")
        self.resultSummary.setColumnCount(3)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.resultSummary.setVerticalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.resultSummary.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.resultSummary.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.resultSummary.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        item.setFlags(QtCore.Qt.ItemIsSelectable|QtCore.Qt.ItemIsEditable|QtCore.Qt.ItemIsDragEnabled|QtCore.Qt.ItemIsDropEnabled|QtCore.Qt.ItemIsUserCheckable)
        self.resultSummary.setItem(0, 0, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        item.setFlags(QtCore.Qt.ItemIsSelectable|QtCore.Qt.ItemIsEditable|QtCore.Qt.ItemIsDragEnabled|QtCore.Qt.ItemIsDropEnabled|QtCore.Qt.ItemIsUserCheckable)
        self.resultSummary.setItem(0, 1, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        item.setFlags(QtCore.Qt.ItemIsSelectable|QtCore.Qt.ItemIsEditable|QtCore.Qt.ItemIsDragEnabled|QtCore.Qt.ItemIsDropEnabled|QtCore.Qt.ItemIsUserCheckable)
        self.resultSummary.setItem(0, 2, item)
        self.resultSummary.horizontalHeader().setStretchLastSection(True)
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(10, 470, 371, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.clearButton = QtWidgets.QPushButton(self.centralwidget)
        self.clearButton.setGeometry(QtCore.QRect(510, 540, 141, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.clearButton.setFont(font)
        self.clearButton.setObjectName("clearButton")
        self.finishButton = QtWidgets.QPushButton(self.centralwidget)
        self.finishButton.setGeometry(QtCore.QRect(680, 540, 141, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.finishButton.setFont(font)
        self.finishButton.setObjectName("finishButton")
        self.resultLabel = QtWidgets.QLabel(self.centralwidget)
        self.resultLabel.setGeometry(QtCore.QRect(450, 500, 371, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.resultLabel.setFont(font)
        self.resultLabel.setText("")
        self.resultLabel.setObjectName("resultLabel")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(10, 230, 701, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.retrieve_2 = QtWidgets.QPushButton(self.centralwidget)
        self.retrieve_2.setGeometry(QtCore.QRect(430, 170, 241, 41))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.retrieve_2.setFont(font)
        self.retrieve_2.setObjectName("retrieve_2")
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setGeometry(QtCore.QRect(450, 490, 371, 16))
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.selectQuery = QtWidgets.QPushButton(self.centralwidget)
        self.selectQuery.setGeometry(QtCore.QRect(700, 40, 121, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.selectQuery.setFont(font)
        self.selectQuery.setObjectName("selectQuery")
        self.queryPath = QtWidgets.QLineEdit(self.centralwidget)
        self.queryPath.setGeometry(QtCore.QRect(10, 40, 681, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.queryPath.setFont(font)
        self.queryPath.setObjectName("queryPath")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(10, 10, 821, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setEnabled(True)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Retinal OCT Retrieval System"))
        self.selectDatabase.setText(_translate("MainWindow", "Browse"))
        self.label_2.setText(_translate("MainWindow", "Select Database Path for Retinal OCT Retrieval"))
        self.retrieve_1.setText(_translate("MainWindow", "Retrieve with Best MAP"))
        item = self.cbirSummary.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Image Name"))
        item = self.cbirSummary.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Distance Value"))
        item = self.cbirSummary.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Image Category"))
        item = self.cbirSummary.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Time Required (seconds)"))
        __sortingEnabled = self.cbirSummary.isSortingEnabled()
        self.cbirSummary.setSortingEnabled(False)
        self.cbirSummary.setSortingEnabled(__sortingEnabled)
        item = self.resultSummary.verticalHeaderItem(0)
        item.setText(_translate("MainWindow", "Metric Value"))
        item = self.resultSummary.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "K = 3"))
        item = self.resultSummary.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "K = 5"))
        item = self.resultSummary.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "K = 7"))
        __sortingEnabled = self.resultSummary.isSortingEnabled()
        self.resultSummary.setSortingEnabled(False)
        self.resultSummary.setSortingEnabled(__sortingEnabled)
        self.label_3.setText(_translate("MainWindow", "Average Precision and Reciprocal Rank for K = 3, 5, 7"))
        self.clearButton.setText(_translate("MainWindow", "Clear"))
        self.finishButton.setText(_translate("MainWindow", "Finish"))
        self.label_4.setText(_translate("MainWindow", "Twin CNN based Retinal OCT Scan Retrieval Result Sorted w.r.t. Absolute Deep Feature Encoding Distance"))
        self.retrieve_2.setText(_translate("MainWindow", "Retrieve with Best MRR"))
        self.selectQuery.setText(_translate("MainWindow", "Browse"))
        self.label_5.setText(_translate("MainWindow", "Select Retinal OCT Query Image"))

        self.selectQuery.clicked.connect(self.getQuery)
        self.selectDatabase.clicked.connect(self.getDatabase)
        self.retrieve_1.clicked.connect(self.retrieveMAP)
        self.retrieve_2.clicked.connect(self.retrieveMRR)
        self.clearButton.clicked.connect(self.reset)
        self.finishButton.clicked.connect(self.exit)

    def getQuery(self):
        self.queryPath.setText(self.dirPicker(
            "Select Direstory Containing OCT Image"))
    
    def getDatabase(self):
        self.databasePath.setText(self.dirPicker(
            "Select Direstory Containing OCT Image"))
    
    def dirPicker(self, title):
        # Function to pick folder path
        dirName = easygui.diropenbox(title=title, default=self.defaultDirPath)
        if dirName != None:
            self.defaultDirPath = dirName
        return(dirName)

    def throwExceptionWindow(self, msg):
        easygui.msgbox(msg=msg, title="Unexpected Error",
                       image="./assets/error.gif")

    def validateInput(self):
        queryPath = self.queryPath.text()
        databasePath = self.databasePath.text()
        
        if queryPath == "":
            raise Exception(
                "OCT Query Image path missing")
        if databasePath == "":
            raise Exception(
                "OCT Database path missing")
    

    def addTableRow(self, table, row, row_data, data_type=None):
        table.setRowCount(row+1)
        col = 0
        for item in row_data:
            cell = QtWidgets.QTableWidgetItem(str(item))
            cell.setFlags(QtCore.Qt.NoItemFlags)
            table.setItem(row, col, cell)
            col += 1

    def setRowHeader(self, table, rowName):
        table.setVerticalHeaderLabels(rowName)

    def removeTableRow(self, table):
        row = table.rowCount()
        col = table.columnCount()
        for i in range(row):
            empty_data = [""]*col
            self.addTableRow(table, i, empty_data)
    
    def retrieveMAP(self):
        # try:
        self.setRowHeader(self.resultSummary, [
                          "Average Precision"])

        self.cbirSummary.setVisible(True)
        self.validateInput()
        queryPath = self.queryPath.text().replace("\\", "\\\\") + "\\\\"
        databasePath = self.databasePath.text().replace("\\", "\\\\") + "\\\\"
        dataset_name = databasePath.split("\\\\")[-2]
        print(queryPath, databasePath, dataset_name)
        np_seed = 2
        tf_seed = 2
  
        result_df, metric_result_df, MAP, MRR = driver_single_image(f"{queryPath}", f"{databasePath}", f".\\result\\{dataset_name}\\seamese_net_avg_images_seed_np_{np_seed}_tf_{tf_seed}_for_k_3_5_7\\", dataset_name, np_seed, tf_seed)
        
        print(result_df)
        print(metric_result_df)
        print(MAP)
        print(MRR)

        self.fillcbirSummary(result_df)
        
        self.fillresultSummary(metric_result_df, "AP")
        self.resultLabel.setText(
            f"Mean Average Precision (MAP) : {MAP}")
        
        # except BaseException as error:
        #     self.throwExceptionWindow(error)


    def retrieveMRR(self):
        # try:
        self.setRowHeader(self.resultSummary, [
                          "Reciprocal Rank"])
        self.cbirSummary.setVisible(True)
        self.validateInput()
        queryPath = self.queryPath.text().replace("\\", "\\\\") + "\\\\"
        databasePath = self.databasePath.text().replace("\\", "\\\\") + "\\\\"
        dataset_name = databasePath.split("\\\\")[-2]
        print(databasePath, dataset_name)
        np_seed = 1
        tf_seed = 2
        
        result_df, metric_result_df, MAP, MRR = driver_single_image(f"{queryPath}", f"{databasePath}", f".\\result\\{dataset_name}\\seamese_net_avg_images_seed_np_{np_seed}_tf_{tf_seed}_for_k_3_5_7\\", dataset_name, np_seed, tf_seed)
        print(result_df)
        print(metric_result_df)
        print(MAP)
        print(MRR)

        self.fillcbirSummary(result_df)
        
        self.fillresultSummary(metric_result_df, "RR")

        self.resultLabel.setText(
            f"Mean Reciprocal Rank (MRR) : {MRR}")
        # except BaseException as error:
        #     self.throwExceptionWindow(error)
    
    def fillcbirSummary(self, df):
        i = 0
        # retrieve_retinopathy_grade = []
        for ind in df.index:
            # print(ind, df['query image'][ind])
            row_data = [df['query2'][ind], df['siamese_distance'][ind], re.sub("[0-9]+", "", df['query2'][ind]), df['total_time'][ind]]
            # retrieve_retinopathy_grade.append(df['Retinopathy grade'][ind])
            self.addTableRow(self.cbirSummary, i, row_data)
            i += 1
            if i == 7:
                break
        # return retrieve_retinopathy_grade
    
    def fillresultSummary(self, df, mode):     
        metric_data = df.iloc[-1]

        if mode == "AP":
            AP = [round(metric_data["precision for k = 3"], 3), round(metric_data["precision for k = 5"], 3), round(metric_data["precision for k = 7"], 3)]
            self.addTableRow(self.resultSummary, 0,
                         AP)
        elif mode == "RR":
            RR = [round(metric_data["reciprocal rank for k = 3"], 3), round(metric_data["reciprocal rank for k = 5"], 3), round(metric_data["reciprocal rank for k = 7"], 3)]
            self.addTableRow(self.resultSummary, 0,
                         RR)

        # self.addTableRow(self.resultSummary, 1,
        #                  RR)

        


    def reset(self):
        self.removeTableRow(self.resultSummary)
        self.removeTableRow(self.cbirSummary)
        self.databasePath.clear()
        self.queryPath.clear()
        self.setRowHeader(self.resultSummary, [
                          "Metric Value"])
        self.resultLabel.setText("")

    def exit(self):
        sys.exit()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
